import logging
from datetime import date
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot, Dispatcher, executor
from config import BOT_TOKEN, CHANNEL_ID, BIRTHDAY_MONTH, BIRTHDAY_DAY

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s:%(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

# –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π –¥–æ –î–†
custom_messages = {
    30: "–æ—Å—Ç–∞–ª—Å—è –º–µ—Å—è—Ü –¥–æ –º–æ–µ–≥–æ –¥—Ä, —É–∂–µ –º–æ–∂–Ω–æ –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ –ø–æ–¥–∞—Ä–∫–∞–º–∏",
    20: "20 –¥–Ω–µ–π –¥–æ –¥—Ä, —è –≤–∞—Ö—É–µ –∫–∞–∫ –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç",
    14: "–¥–æ –º–æ–µ–≥–æ –î–† –¥–≤–µ –Ω–µ–¥–µ–ª–∏(14 –¥–Ω–µ–π), –≤—ã —É–∂–µ –ø—Ä–∏–¥—É–º–∞–ª–∏ —á–æ –º–Ω–µ –¥–∞—Ä–∏—Ç—å??",
    10: "10 –¥–Ω–µ–π –¥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞",
    7:  "–û—Å—Ç–∞–ª–∞—Å—å –Ω–µ–¥–µ–ª—è –¥–æ –º–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è! –ì–æ—Ç–æ–≤—å—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ üéÅ",
    5:  "–ü—è—Ç—å –¥–Ω–µ–π –¥–æ –º–æ–µ–≥–æ –î–†! –ø–∏–∑–¥–µ—Ü –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç",
    3:  "–í—Å–µ–≥–æ —Ç—Ä–∏ –¥–Ω—è –¥–æ –º–æ–µ–≥–æ –î–†! üî•",
    2:  "–î–≤–∞ –¥–Ω—è –∏ —è —É–∂–µ —Å—Ç–∞—Ä—à–µ –Ω–∞ –≥–æ–¥",
    1:  "–ó–∞–≤—Ç—Ä–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫! üéà",
}

default_template = "–î–æ –º–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {verb} {days} {word}! –ì–æ—Ç–æ–≤—å—Ç–µ –ø–æ–¥–∞—Ä–∫–∏!"
hour_before_message = "–î–æ –º–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å!!! –°–∫–æ—Ä–æ –ø—Ä–∞–∑–¥–Ω–∏–∫ üéÇ"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

def russian_plural(days: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    """
    if days % 10 == 1 and days % 100 != 11:
        return '–¥–µ–Ω—å'
    elif 2 <= days % 10 <= 4 and not (12 <= days % 100 <= 14):
        return '–¥–Ω—è'
    else:
        return '–¥–Ω–µ–π'

async def send_countdown():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —Å–∫–æ–ª—å–∫–æ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –î–†
    """
    today = date.today()
    year = today.year if (today.month, today.day) <= (BIRTHDAY_MONTH, BIRTHDAY_DAY) else today.year + 1
    birthday = date(year, BIRTHDAY_MONTH, BIRTHDAY_DAY)
    days_left = (birthday - today).days

    if days_left in custom_messages:
        text = custom_messages[days_left]
    else:
        word = russian_plural(days_left)
        verb = '–æ—Å—Ç–∞–ª—Å—è' if days_left % 10 == 1 and days_left % 100 != 11 else '–æ—Å—Ç–∞–ª–æ—Å—å'
        text = default_template.format(verb=verb, days=days_left, word=word)

    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=text)
        logging.info(f"Sent countdown message: {text}")
    except Exception as e:
        logging.error(f"Failed to send countdown message: {e}")

async def send_hour_alert():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
    """
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=hour_before_message)
        logging.info("Sent hour-before alert")
    except Exception as e:
        logging.error(f"Failed to send hour-before message: {e}")

async def on_startup(dp):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞
    """
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    scheduler.add_job(send_countdown, CronTrigger(hour=3, minute=0), id="daily_countdown", replace_existing=True)
    scheduler.add_job(send_hour_alert, CronTrigger(month=BIRTHDAY_MONTH, day=BIRTHDAY_DAY, hour=23, minute=0), id="hour_before_alert", replace_existing=True)
    scheduler.start()
    logging.info("Scheduler started")

    # —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–æ–Ω
    await send_countdown()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
