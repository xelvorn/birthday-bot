import logging
from datetime import datetime, date
from zoneinfo import ZoneInfo
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from aiogram import Bot, Dispatcher, types, executor
from config import BOT_TOKEN, CHANNEL_ID, BIRTHDAY_MONTH, BIRTHDAY_DAY

# ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bot –∏ Dispatcher –¥–ª—è aiogram v2.25.2
bot = Bot(token=BOT_TOKEN)
dp  = Dispatcher(bot)

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s:%(name)s: %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

# –∫–∞—Å—Ç–æ–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –¥–Ω–µ–π –¥–æ –î–†
custom_messages = {
    30: "–æ—Å—Ç–∞–ª—Å—è –º–µ—Å—è—Ü –¥–æ –º–æ–µ–≥–æ –¥—Ä, —É–∂–µ –º–æ–∂–Ω–æ –∑–∞–¥—É–º–∞—Ç—å—Å—è –Ω–∞–¥ –ø–æ–¥–∞—Ä–∫–∞–º–∏",
    20: "20 –¥–Ω–µ–π –¥–æ –¥—Ä, —è –≤–∞—Ö—É–µ –∫–∞–∫ –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç",
    14: "–¥–æ –º–æ–µ–≥–æ –î–† –¥–≤–µ –Ω–µ–¥–µ–ª–∏(14 –¥–Ω–µ–π), –≤—ã —É–∂–µ –ø—Ä–∏–¥—É–º–∞–ª–∏ —á–æ –º–Ω–µ –¥–∞—Ä–∏—Ç—å??",
    10: "10 –¥–Ω–µ–π –¥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞",
    7:  "–û—Å—Ç–∞–ª–∞—Å—å –Ω–µ–¥–µ–ª—è –¥–æ –º–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è! –ì–æ—Ç–æ–≤—å—Ç–µ –ø–æ–¥–∞—Ä–∫–∏ üéÅ",
    5:  "–ü—è—Ç—å –¥–Ω–µ–π –¥–æ –º–æ–µ–≥–æ –î–†! –ø–∏–∑–¥–µ—Ü –≤—Ä–µ–º—è –ª–µ—Ç–∏—Ç",
    3:  "–í—Å–µ–≥–æ —Ç—Ä–∏ –¥–Ω—è –¥–æ –º–æ–µ–≥–æ –î–†! üî•",
    2:  "–î–≤–∞ –¥–Ω—è –∏ —è —É–∂–µ —Å—Ç–∞—Ä—à–µ –Ω–∞ –≥–æ–¥",
    1:  "–ó–∞–≤—Ç—Ä–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫! üéà",
}

def russian_plural(days: int) -> str:
    """
    –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
    """
    if days % 10 == 1 and days % 100 != 11:
        return '–¥–µ–Ω—å'
    elif 2 <= days % 10 <= 4 and not (12 <= days % 100 <= 14):
        return '–¥–Ω—è'
    else:
        return '–¥–Ω–µ–π'

def get_countdown_text() -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –æ—Ç—Å—á—ë—Ç–∞ –¥–æ –î–†
    """
    today = datetime.now(ZoneInfo("Europe/Moscow")).date()
    year = today.year if (today.month, today.day) <= (BIRTHDAY_MONTH, BIRTHDAY_DAY) else today.year + 1
    birthday = date(year, BIRTHDAY_MONTH, BIRTHDAY_DAY)
    days_left = (birthday - today).days

    if days_left in custom_messages:
        return custom_messages[days_left]
    word = russian_plural(days_left)
    verb = '–æ—Å—Ç–∞–ª—Å—è' if days_left % 10 == 1 and days_left % 100 != 11 else '–æ—Å—Ç–∞–ª–æ—Å—å'
    return f"–î–æ –º–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è {verb} {days_left} {word}! –ì–æ—Ç–æ–≤—å—Ç–µ –ø–æ–¥–∞—Ä–∫–∏!"

async def send_countdown():
    text = get_countdown_text()
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=text)
        logging.info(f"Sent countdown message: {text}")
    except Exception as e:
        logging.error(f"Failed to send countdown message: {e}")

async def send_hour_alert():
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text="–î–æ –º–æ–µ–≥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è –æ—Å—Ç–∞–ª—Å—è 1 —á–∞—Å!!! –°–∫–æ—Ä–æ –ø—Ä–∞–∑–¥–Ω–∏–∫ üéÇ")
        logging.info("Sent hour-before alert")
    except Exception as e:
        logging.error(f"Failed to send hour-before message: {e}")

async def on_startup(dp: Dispatcher):
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")
    # –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 00:00 –ú–°–ö
    scheduler.add_job(
        send_countdown,
        CronTrigger(hour=0, minute=0, timezone=ZoneInfo("Europe/Moscow")),
        id="daily_countdown",
        replace_existing=True,
    )
    # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –∑–∞ —á–∞—Å –¥–æ –î–†
    scheduler.add_job(
        send_hour_alert,
        CronTrigger(month=BIRTHDAY_MONTH, day=BIRTHDAY_DAY, hour=23, minute=0, timezone=ZoneInfo("Europe/Moscow")),
        id="hour_before_alert",
        replace_existing=True,
    )
    scheduler.start()
    logging.info("Scheduler started")

    # —Ç–µ—Å—Ç–æ–≤—ã–π –µ–¥–∏–Ω–∏—á–Ω—ã–π –ø—Ä–æ–≥–æ–Ω: –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—Å—á—ë—Ç–æ–º + –∑–∞–º–µ—Ç–∫–∞ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤ –õ–°
    combined = f"{get_countdown_text()}\n\n–ë–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ò—Å—Ö–æ–¥–Ω–∏–∫–∏: https://github.com/xelvorn/birthday-bot"
    try:
        await bot.send_message(chat_id=CHANNEL_ID, text=combined)
        logging.info("Sent combined startup message")
    except Exception as e:
        logging.error(f"Failed to send startup message: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(lambda message: message.chat.type == 'private')
async def handle_private(message: types.Message):
    await message.reply(
        "–ë–æ—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–Ω–∞–ª. "
        "–ò—Å—Ö–æ–¥–Ω–∏–∫–∏: https://github.com/xelvorn/birthday-bot"
    )

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
